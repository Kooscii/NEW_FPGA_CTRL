module CtrlBox(
	clk,
	//rst_input,	//generated by FPGA automaticly
	
	//trigger signal
	Switch_singal,	//might be used in test
	//Fiber_singal,
	//BNC_signal,
	//MCU_singal,	//from stm 32
	
	//I2C 2-wire
	SCL,
	SDA,	//SDA is a in&out port
	
	//PWM output 0-5
	//PWM,
	
	//pulse output 0-5
	Pulse,
	
	//trigger enable - control relay
	EN_trigger,
	
	//charing enable - control PWM
	//EN_pwm,
	
	//EN_charging,
	
	//Latch singal while trigging
	latch
	
);

input clk;
//input rst;
input Switch_singal;
//input Fiber_singal, BNC_signal, MCU_singal;
input SCL;
inout SDA;
//output[PWM_channel:0] PWM;
output[Pulse_channel:0] Pulse;
output EN_trigger;
//output EN_pwm, EN_charging;
output latch;

parameter Pulse_channel = 1;	//Maximum Pulse channel -1
parameter PWM_channel = 0;	//Maximum PWM channel -1

// reset signal generates
wire rst;	//other modules reset signal
emc U1(
	.clk(clk),
	.rstn(rst)
);

//100kHz timer
wire stime;
RTC time_1MHz(
	.clk(clk),
	.rst(rst),
	.stime(stime)
);

//I2C slave module
//Output 1-byte command and 2-byte data
wire[7:0] command;
wire[15:0] data;
wire rcv_succ;
i2c_slave U2(
	.SDA(SDA),
	.SCL(SCL),
	.data(data),
	.command(command),
	.rcv_succ(rcv_succ)
);

//I2C data handle module
wire[5:0] enable_trigger, enable_pwm;

wire EN_trigger_r = (enable_trigger)? 1'b0:1'b1;
//wire EN_pwm_r = (enable_pwm)?1'b1:1'b0;
assign EN_trigger = EN_trigger_r;
//assign EN_pwm = EN_pwm_r;
//assign EN_charging = enable_charging;

wire multi_pulse;
wire[15:0] frequency;
wire[15:0] pulse_width_0,	pulse_delay_0;
wire[15:0] pulse_width_1,	pulse_delay_1;
wire[15:0] pulse_width_2,	pulse_delay_2;
wire[15:0] pulse_width_3,	pulse_delay_3;
wire[15:0] pulse_width_4,	pulse_delay_4;
wire[15:0] pulse_width_5,	pulse_delay_5;
wire enable_charging;
wire[15:0] PWM_ctrol_0, PWM_ctrol_1, PWM_ctrol_2, PWM_ctrol_3, PWM_ctrol_4, PWM_ctrol_5;
i2c_data U3(
	.clk(clk),
	.rst(rst),
	.rcv_succ(rcv_succ),
	.command(command),
	.data(data),
	.enable_trigger(enable_trigger),
	.enable_pwm(enable_pwm),
	.multi_pulse(multi_pulse),
	.frequency(frequency),
	.pulse_width_0(pulse_width_0),	.pulse_delay_0(pulse_delay_0),
	.pulse_width_1(pulse_width_1),	.pulse_delay_1(pulse_delay_1),
	.pulse_width_2(pulse_width_2),	.pulse_delay_2(pulse_delay_2),
	.pulse_width_3(pulse_width_3),	.pulse_delay_3(pulse_delay_3),
	.pulse_width_4(pulse_width_4),	.pulse_delay_4(pulse_delay_4),
	.pulse_width_5(pulse_width_5),	.pulse_delay_5(pulse_delay_5),
	.enable_charging(enable_charging),
	.PWM_ctrol_0(PWM_ctrol_0),
	.PWM_ctrol_1(PWM_ctrol_1),
	.PWM_ctrol_2(PWM_ctrol_2),
	.PWM_ctrol_3(PWM_ctrol_3),
	.PWM_ctrol_4(PWM_ctrol_4),
	.PWM_ctrol_5(PWM_ctrol_5)
);

//this module aims to decrease the jitter from switch
wire switch_trigger;
switch_jitter U4(
	.clk(clk),	//50MHz
	.rst(rst),	//reset signal
	
	.switch_input(Switch_singal),
	
	.switch_trigger(switch_trigger)
);

//trigger singal generates
wire trigger;
trigger_singal_generator U5(
	.clk(clk),
	.rst(rst),
	.stime(stime),
	.trigger_1(switch_trigger),
	//.trigger_2(Fiber_singal),
	//.trigger_3(~BNC_signal),
	//.trigger_4(~MCU_singal),
	.trigger_2(1'b0),
	.trigger_3(1'b0),
	.trigger_4(1'b0),
	.multi_pulse(multi_pulse),
	.en_trigger(enable_trigger),
	.frequency(frequency),	
	.trigger(trigger),
	.latch(latch)
);

//pulse generating module
wire[5:0] Pulse_r;
assign Pulse = Pulse_r[Pulse_channel:0];
pulse_generation U6(
	.clk(clk),
	.rst(rst),
	.enable(enable_trigger),
	.trigger(trigger),
	.pulse_width_0(pulse_width_0),	.pulse_delay_0(pulse_delay_0),
	.pulse_width_1(pulse_width_1),	.pulse_delay_1(pulse_delay_1),
	.pulse_width_2(pulse_width_2),	.pulse_delay_2(pulse_delay_2),
	.pulse_width_3(pulse_width_3),	.pulse_delay_3(pulse_delay_3),
	.pulse_width_4(pulse_width_4),	.pulse_delay_4(pulse_delay_4),
	.pulse_width_5(pulse_width_5),	.pulse_delay_5(pulse_delay_5),
	.Pulse(Pulse_r)
);

//PWM generation module
wire[5:0] PWM_r;
//assign PWM = PWM_r[PWM_channel:0];
pwm_generation U7(
	.stime(stime),
	.enable(enable_pwm),
	.enable_charging(enable_charging),
	.PWM_ctrol_0(PWM_ctrol_0),
	.PWM_ctrol_1(PWM_ctrol_1),
	.PWM_ctrol_2(PWM_ctrol_2),
	.PWM_ctrol_3(PWM_ctrol_3),
	.PWM_ctrol_4(PWM_ctrol_4),
	.PWM_ctrol_5(PWM_ctrol_5),
	.PWM(PWM_r)
);

endmodule